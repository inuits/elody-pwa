scalar Void

enum ExcludeOrInclude {
  exclude
  include
}

interface Entity {
  id: String!
  type: String!
  metadata(keys: [String]!, excludeOrInclude: ExcludeOrInclude!): [MetadataAndRelation]!
  media: Media
}

type BaseEntity implements Entity {
  id: String!
  type: String!
  metadata(keys: [String]!, excludeOrInclude: ExcludeOrInclude!): [MetadataAndRelation]!
  media: Media
}

type Asset implements Entity {
  id: String!
  type: String!
  metadata(keys: [String]!, excludeOrInclude: ExcludeOrInclude!): [MetadataAndRelation]!
  media: Media
  teaserMetadata: [MetadataAndRelation]
  title: [MetadataAndRelation]
}

type Metadata {
  key: String!
  value: String!
  lang: String
  label: String!
  immutable: Boolean
}

type MetadataRelation {
  key: String!
  value: String!
  label: String!
  type: String
  linkedEntity: Entity
}

union MetadataAndRelation = Metadata | MetadataRelation

type Media {
  primaryMediafile: String
  primaryMediafileLocation: String
  primaryThumbnailLocation: String
  mediafiles: [MediaFile]
}

type MediaFile {
  _id: String!
  original_file_location: String
  thumbnail_file_location: String
  filename: String
  entities: [String]
  metadata: [MediaFileMetadata]
}

type MediaFileMetadata {
  key: String
  value: String
}

type EntitiesResults {
  results: [Entity]
  count: Int
  limit: Int
}

#Advanced search

enum advancedFilterTypes {
  tekst
  multiselect
  checklist
  minmax
}

type advancedFilter {
  key: String!
  label: String
  type: advancedFilterTypes!
}

type filterOption {
  value: String
  label: String
}

input SearchFilter {
  value: String
  isAsc: Boolean
  key: String
  raw: Boolean
  relation_filter: [String]
}

#Users

type User {
  id: String!
  email: String!
  family_name: String!
  given_name: String!
  name: String!
  preferred_username: String!
}

#Import

type Directory {
  id: String
  dir: String
  has_subdirs: Boolean
  parent: String!
}

#Jobs

enum JobType {
  All
  MediaFile
  CSVImport
  FileUpload
}

input PaginationInfo {
  limit: Int
  skip: Int
}

type Job {
  job_type: String
  job_info: String
  status: String
  user: String
  asset_id: String
  mediafile_id: String
  parent_job_id: String
  end_time: String
  start_time: String
  amount_of_jobs: Int
  completed_jobs: Int
  _id: String
  _key: String
  _rev: String
  sub_jobs: [Job]
}

type JobsResults {
  results: [Job]
  count: Int
  limit: Int
  next: String
}

#Query
input Filters {
  query: String
  type: String!
}

type Query {
  Entity(id: String!): Entity
  Entities(
    limit: Int
    skip: Int
    searchValue: SearchFilter!
    fetchPolicy: String
  ): EntitiesResults
  User: User
  Directories(dir: String): [Directory]
  Jobs(paginationInfo: PaginationInfo, filters: Filters): JobsResults
  Job(id: String!): Job
  advancedFilters: [advancedFilter]
  FilterOptions(key: String!): [filterOption]
}

#Mutations
type Mutation {
  replaceMetadata(id: String!, metadata: [MetadataInput!]!): [Metadata!]!
  StartImport(folder: String!): ImportReturn
  # addRelations(id: String!, relations: [RelationInput!]!): [Relation]!
}

input MetadataInput {
  key: String!
  value: String
  lang: String
}

type ImportReturn {
  message_id: String
}
