scalar Upload

enum ExcludeOrInclude {
  exclude
  include
}

enum Permission {
  canget
  canput
  canpatch
  candelete
}

interface Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  form: Form
  permission: [Permission]
}

type BaseEntity implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  permission: [Permission]
}

type MediaFileEntity implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  teaserMetadata: [MetadataAndRelation]
  permission: [Permission]
}

type Asset implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  teaserMetadata: [MetadataAndRelation]
  title: [MetadataAndRelation]
  form: Form
  permission: [Permission]
}

type Story implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  teaserMetadata: [MetadataAndRelation]
  title: [MetadataAndRelation]
  form: Form
  permission: [Permission]
}

type Frame implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  permission: [Permission]
}

type Testimony implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  form: Form
  permission: [Permission]
}

type boxEntity implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  permission: [Permission]
}

type person implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  form: Form
  permission: [Permission]
}

type SimpleEntity implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  permission: [Permission]
}

type IntermediateEntity implements Entity {
  id: String!
  uuid: String!
  type: String!
  metadata(
    keys: [String]!
    excludeOrInclude: ExcludeOrInclude!
  ): [MetadataAndRelation]!
  media: Media
  form: Form
  permission: [Permission]
}

type RelationMetaData {
  key: String!
  value: String!
}

type Metadata {
  key: String!
  value: String!
  lang: String
  label: String!
  immutable: Boolean
}

type MetadataRelation {
  key: String!
  value: String!
  label: String!
  type: String
  metadataOnRelation: [RelationMetaData]
  linkedEntity: Entity
}

union MetadataAndRelation = Metadata | MetadataRelation

type Media {
  primaryMediafile: String
  primary_transcode: String
  primaryMediafileLocation: String
  primaryThumbnailLocation: String
  mediafiles: [MediaFile]
}

type MediaFile {
  _id: String!
  original_file_location: String
  thumbnail_file_location: String
  transcode_filename: String
  filename: String
  entities: [String]
  metadata: [MediaFileMetadata]
  mimetype: String
  isPublic: Boolean
  is_primary: Boolean
  is_primary_thumbnail: Boolean
  user: String
}

input MediaFileInput {
  _id: String
  original_file_location: String
  thumbnail_file_location: String
  filename: String
  entities: [String]
  metadata: [MediaFileMetadataInput]
  mimetype: String
  is_primary: Boolean
  is_primary_thumbnail: Boolean
  user: String
}

input MediaFileMetadataInput {
  key: String
  value: String
}

type MediaFileMetadata {
  key: String
  value: String
}

type EntitiesResults {
  results: [Entity]
  count: Int
  limit: Int
}

#Advanced search

enum advancedFilterTypes {
  tekst
  multiselect
  checklist
  minmax
}

type advancedFilter {
  key: String!
  label: String
  type: advancedFilterTypes!
  isRelation: Boolean
}

type filterOption {
  value: String
  label: String
}

input SearchFilter {
  value: String
  isAsc: Boolean
  key: String
}

input MinMaxInput {
  min: Int
  max: Int
  isRelation: Boolean
}
input TextInput {
  value: String
}
input MultiSelectInput {
  value: [String]
  AndOrValue: Boolean
}

enum SearchInputType {
  AdvancedInputMediaFilesType
  AdvancedInputType
  SimpleInputtype
}

enum AdvancedInputType {
  MinMaxInput
  TextInput
  MultiSelectInput
}

input FilterInput {
  key: String!
  type: AdvancedInputType!
  minMaxInput: MinMaxInput
  textInput: TextInput
  multiSelectInput: MultiSelectInput
}
#Users

type User {
  id: String!
  email: String!
  family_name: String!
  given_name: String!
  name: String!
  preferred_username: String!
}

#Import

type Directory {
  id: String
  dir: String
  has_subdirs: Boolean
  parent: String!
}

#Jobs

enum JobType {
  all
  csv_row_import
  csv_import
  csv_read
  upload_file
  upload_transcode
}

input PaginationInfo {
  limit: Int
  skip: Int
}

type Job {
  job_type: String
  job_info: String
  status: String
  user: String
  asset_id: String
  mediafile_id: String
  parent_job_id: String
  end_time: String
  start_time: String
  amount_of_jobs: Int
  completed_jobs: Int
  _id: String
  _key: String
  _rev: String
  sub_jobs: SubJobResults
  message: String
}

type SubJobResults {
  count: Int
  results: [Job]
}

type JobsResults {
  results: [Job]
  count: Int
  limit: Int
  next: String
}

#Forms
enum InputFieldTypes {
  text
  number
  boolean
  dropdown
}

enum validation {
  required
  optional
}

type MetadataField {
  label: String
  key: String!
  type: InputFieldTypes!
  order: Int
  active: Boolean
  validation: validation
  options: [MetadataFieldOption]
}

type MetadataFieldOption {
  label: String
  value: String!
}

type RelationField {
  key: String!
  label: String
  relationType: String!
  metadata: [MetadataField]
  acceptedEntityTypes: [String]!
  disabled: Boolean
}

union MetadataOrRelationField = MetadataField | RelationField

enum RelationType {
  frames
  stories
}

type Form {
  fields: [MetadataOrRelationField]!
}

input MetadataFieldInput {
  key: String!
  value: String
}

input relationInput {
  relationType: String!
  metadata: [MetadataFieldInput]
  linkedEntityId: String
  label: String
  value: String
}

input MetadataFormInput {
  Metadata: [MetadataFieldInput]
  relations: [relationInput]
}

#Query
input Filters {
  query: String
  type: String!
}

type userPermissions {
  payload: [String]
}

type Query {
  Entity(id: String!, type: String!): Entity
  Entities(
    limit: Int
    skip: Int
    searchInputType: SearchInputType
    searchValue: SearchFilter
    advancedSearchValue: [FilterInput]
    fetchPolicy: String
  ): EntitiesResults
  User: User
  Directories(dir: String): [Directory]
  Jobs(paginationInfo: PaginationInfo, filters: Filters): JobsResults
  Job(id: String!): Job
  advancedFilters(choice: String!): [advancedFilter]
  FilterOptions(key: String!): [filterOption]
  Form(type: String!): Form
  UserPermissions: userPermissions
}

input AdvancedSearchInput {
  value: [AdvancedInputType]
}

input EntityInput {
  title: String
  id: String
  type: Entitytyping
  metadata: [MetadataFieldInput]
  identifiers: [String]
}

enum Entitytyping {
  story
  frame
  box
  asset
}

input updateOrderNode {
  id: String!
  order: Int!
}

input OrderArrayInput {
  value: [updateOrderNode!]!
}

#Mutations
type Mutation {
  replaceMetadata(id: String!, metadata: [MetadataInput!]!): [Metadata!]!
  StartImport(folder: String!): ImportReturn
  # addRelations(id: String!, relations: [RelationInput!]!): [Relation]!
  replaceRelationsAndMetaData(id: String!, form: MetadataFormInput): Entity
  deleteData(id: String!, path: deletePaths!): String
  createEntity(entity: EntityInput!): Entity
  postMediaFile(mediaFileInput: MediaFileInput!, file: Upload!): MediaFile
  linkMediafileToEntity(
    entityId: String!
    mediaFileInput: MediaFileInput!
  ): MediaFile
  patchMediaFileMetadata(
    MediafileId: String!
    MediaFileMetadata: [MediaFileMetadataInput]!
  ): MediaFile
  uploadFile(id: String!, file: Upload!): String
  setMediaPrimaire(entity_id: String!, mediafile_id: String!): String
  setThumbnailPrimaire(entity_id: String!, mediafile_id: String!): String
  getAssetsRelationedWithMediafFile(mediaFileId: String!): [Asset]
  updateMediafilesOrder(value: OrderArrayInput!): String
  deleteRelations(id: String!, metadata: [MetadataInput!]!): String
}

enum deletePaths {
  entities
  mediafiles
}

input MetadataInput {
  key: String!
  value: String
  lang: String
  type: String
}

type ImportReturn {
  message_id: String
}

type MediaFilePostReturn {
  url: String
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}
