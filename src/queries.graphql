fragment metadata on Metadata {
  key
  value
  label
  immutable
}

fragment metadataRelation on MetadataRelation {
  key
  value
  label
  type
  metadataOnRelation {
    key
    value
  }
}

fragment minimalBaseEntity on Entity {
  id
  uuid
  type
}

fragment editForm on Form {
  fields {
    __typename
    ... on MetadataField {
      label
      key
      type
      options {
        value
        label
      }
    }
    ... on RelationField {
      label
      relationType
      disabled
      metadata {
        key
        type
        label
      }
      acceptedEntityTypes
    }
  }
}

fragment minimalAsset on Asset {
  ...minimalBaseEntity
  media {
    primaryMediafile
  }
  teaserMetadata: metadata(
    keys: ["type", "title", "object_number"]
    excludeOrInclude: include
  ) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
    }
  }
  title: metadata(keys: ["title"], excludeOrInclude: include) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
    }
  }
}

fragment minimalLinkedAsset on Asset {
  ...minimalBaseEntity
  media {
    primaryMediafile
  }
  teaserMetadata: metadata(
    keys: ["title"]
    excludeOrInclude: include
  ) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
    }
  }
}

fragment fullEntity on Entity {
  id
  type
  form {
    ...editForm
  }
  title: metadata(keys: ["title"], excludeOrInclude: include) {
    __typename
    ... on Metadata {
      key
      value
      label
      immutable
    }
  }
  ... on Asset {
    media {
      mediafiles {
        _id
        filename
        original_file_location
        transcode_filename
        thumbnail_file_location
        mimetype
        isPublic
        metadata {
          key
          value
        }
        is_primary
        is_primary_thumbnail
      }
    }
  }
  ... on MediaFileEntity {
    media {
      mediafiles {
        _id
        filename
        original_file_location
        transcode_filename
        thumbnail_file_location
        mimetype
        isPublic
        metadata {
          key
          value
        }
        is_primary
        is_primary_thumbnail
      }
    }
  }
}

fragment fullEntityRecursive on Entity {
  ...fullEntity
  metadata(keys: ["title"], excludeOrInclude: exclude) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
      linkedEntity {
        ... on Asset {
          ...minimalBaseEntity
          media {
            primaryMediafile
          }
          teaserMetadata: metadata(
            keys: ["title", "object_number"]
            excludeOrInclude: include
          ) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on Frame {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on Story {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on boxEntity {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on Testimony {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["description"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on person {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["fullname"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on SimpleEntity {
          ...minimalBaseEntity
          teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ... on IntermediateEntity {
          ...minimalBaseEntity
          ...fullEntity
          metadata(keys: [], excludeOrInclude: exclude) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
              linkedEntity {
                ...fullEntity
                ... on Asset {
                  ...minimalBaseEntity
                  media {
                    primaryMediafile
                  }
                  teaserMetadata: metadata(
                    keys: ["title", "object_number"]
                    excludeOrInclude: include
                  ) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on Frame {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on Story {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on boxEntity {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on Testimony {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(
                    keys: ["description"]
                    excludeOrInclude: include
                  ) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on person {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(
                    keys: ["fullname"]
                    excludeOrInclude: include
                  ) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                ... on SimpleEntity {
                  ...minimalBaseEntity
                  teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
                    __typename
                    ... on Metadata {
                      ...metadata
                    }
                    ... on MetadataRelation {
                      ...metadataRelation
                    }
                  }
                }
                metadata(keys: [], excludeOrInclude: exclude) {
                  __typename
                  ... on Metadata {
                    ...metadata
                  }
                  ... on MetadataRelation {
                    ...metadataRelation
                    linkedEntity {
                      ...fullEntity
                      ... on Asset {
                        ...minimalBaseEntity
                        media {
                          primaryMediafile
                        }
                        teaserMetadata: metadata(
                          keys: ["title", "object_number"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on Frame {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["title"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on Story {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["title"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on boxEntity {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["title"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on Testimony {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["description"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on person {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["fullname"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      ... on SimpleEntity {
                        ...minimalBaseEntity
                        teaserMetadata: metadata(
                          keys: ["title"]
                          excludeOrInclude: include
                        ) {
                          __typename
                          ... on Metadata {
                            ...metadata
                          }
                          ... on MetadataRelation {
                            ...metadataRelation
                          }
                        }
                      }
                      metadata(keys: [], excludeOrInclude: exclude) {
                        ... on Metadata {
                          ...metadata
                        }
                        ... on MetadataRelation {
                          ...metadataRelation
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query getEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter
  $advancedSearchValue: [FilterInput]
  $searchInputType: SearchInputType
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    advancedSearchValue: $advancedSearchValue
    searchInputType: $searchInputType
  ) {
    count
    limit
    results {
      id
      uuid
      type
      ... on Asset {
        ...minimalAsset
      }
      ... on MediaFileEntity {
        media {
          primaryMediafile
          mediafiles {
            _id
            filename
            original_file_location
            transcode_filename
            thumbnail_file_location
            mimetype
            isPublic
            metadata {
              key
              value
            }
            is_primary
            is_primary_thumbnail
          }
        }
        teaserMetadata: metadata(keys: ["filename"], excludeOrInclude: include) {
          __typename
         ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on Frame {
        teaserMetadata: metadata(keys: ["type", "title"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on Story {
        teaserMetadata: metadata(keys: ["type", "title"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on boxEntity {
        teaserMetadata: metadata(keys: ["type", "title"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on Testimony {
        teaserMetadata: metadata(keys: ["description"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on person {
        teaserMetadata: metadata(keys: ["fullname"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on SimpleEntity {
        teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
      ... on IntermediateEntity {
        teaserMetadata: metadata(keys: ["title"], excludeOrInclude: include) {
          __typename
          ... on Metadata {
            key
            value
            label
            immutable
          }
          ... on MetadataRelation {
            key
            value
            label
            type
            metadataOnRelation {
              key
              value
            }
          }
        }
      }
    }
  }
}

# query getAdvancedEntities($filters: [AdvancedSearchInput]!) {
#   Entities(filters: $filters) {
#     count
#     limit
#   }
# }

query getEntityById($id: String!, $type: String!) {
  Entity(id: $id, type: $type) {
    ...fullEntityRecursive
  }
}

fragment job on Job {
  job_type
  job_type
  job_info
  status
  user
  asset_id
  mediafile_id
  parent_job_id
  end_time
  start_time
  amount_of_jobs
  completed_jobs
  _id
  _key
  _rev
  error_message
}

fragment jobWithSubJobs on Job {
  ...job
  sub_jobs {
    count
    results {
      ...job
    }
  }
}

query getDirectories($dir: String) {
  Directories(dir: $dir) {
    id
    dir
    has_subdirs
    parent
  }
}

query getJobs($paginationInfo: PaginationInfo, $filters: Filters) {
  Jobs(paginationInfo: $paginationInfo, filters: $filters) {
    results {
      ...job
    }
    count
    limit
    next
  }
}

query getJob($id: String!) {
  Job(id: $id) {
    ...jobWithSubJobs
  }
}

query getAdvancedFilters($choice: String!) {
  advancedFilters(choice: $choice) {
    label
    type
    key
  }
}

query getFilterOptions($key: String!) {
  FilterOptions(key: $key) {
    value
    label
  }
}

mutation postStartImport($folder: String!) {
  StartImport(folder: $folder) {
    message_id
  }
}

mutation postMediaFile($mediaFileInput: MediaFileInput!, $file: Upload!) {
  postMediaFile(mediaFileInput: $mediaFileInput, file: $file) {
    _id
    filename
    original_file_location
    thumbnail_file_location
    mimetype
    metadata {
      key
      value
    }
  }
}

mutation linkMediafileToEntity($entityId: String!, $mediaFileInput: MediaFileInput!) {
  linkMediafileToEntity(entityId: $entityId, mediaFileInput: $mediaFileInput) {
    _id
    filename
    original_file_location
    thumbnail_file_location
    mimetype
    metadata {
      key
      value
    }
  }
}

mutation patchMediaFileMetadata(
  $mediafileId: String!
  $mediaFileInput: [MediaFileMetadataInput]!
) {
  patchMediaFileMetadata(MediafileId: $mediafileId, MediaFileMetadata: $mediaFileInput) {
    _id
    filename
  }
}

mutation getAssetsRelationedWithMediafFile(
  $mediaFileId: String!
) {
  getAssetsRelationedWithMediafFile(mediaFileId: $mediaFileId) {
    ...minimalLinkedAsset
  }
}

mutation editMetadata($id: String!, $metadata: [MetadataInput!]!) {
  replaceMetadata(id: $id, metadata: $metadata) {
    key
    value
    lang
  }
}

mutation replaceRelationsAndMetaData($id: String!, $form: MetadataFormInput!) {
  replaceRelationsAndMetaData(id: $id, form: $form) {
    ...fullEntityRecursive
  }
}

mutation deleteData($id: String!, $path: deletePaths!) {
  deleteData(id: $id, path: $path)
}

mutation createEntity($data: EntityInput!) {
  createEntity(entity: $data) {
    ...fullEntity
  }
}

mutation setMediaPrimaire($entity_id: String!, $mediafile_id: String!) {
  setMediaPrimaire(entity_id: $entity_id, mediafile_id: $mediafile_id)
}

mutation setThumbnailPrimaire($entity_id: String!, $mediafile_id: String!) {
  setThumbnailPrimaire(entity_id: $entity_id, mediafile_id: $mediafile_id)
}

query GetForms($type: String!) {
  Form(type: $type) {
    fields {
      __typename
      ... on MetadataField {
        label
        key
        type
        active
        options {
          value
          label
        }
      }
      ... on RelationField {
        label
        relationType
        disabled
        metadata {
          key
          type
          label
        }
        acceptedEntityTypes
      }
    }
  }
}