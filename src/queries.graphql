fragment minimalEntity on Entity {
  id
  type
  metadata(key: [title, type]) {
    key
    value
  }
  mediafiles {
    thumbnail_file_location
  }
}

fragment fullEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  metadata(key: [description, material, type]) {
    key
    value
  }
  mediafiles {
    _id
    original_file_location
  }
  relations {
    key
    type
  }
}

query getEntities($limit: Int, $skip: Int, $searchValue: SearchFilter!) {
  Entities(limit: $limit, skip: $skip, searchValue: $searchValue) {
    count
    limit
    results {
      ...minimalEntity
    }
  }
}

query getFullEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter!
  $fetchPolicy: String
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    fetchPolicy: $fetchPolicy
  ) {
    count
    limit
    results {
      ...fullEntity
    }
  }
}

query getEntityById($id: String!) {
  Entity(id: $id) {
    ...fullEntity
  }
}

query getDirectories {
  Directories {
    id
    label
    parent
  }
}

query getEnumsByName($enumName: String!) {
  __type(name: $enumName) {
    name
    enumValues {
      name
    }
  }
}

mutation postStartImport($folder: String!) {
  StartImport(folder: $folder) {
    message_id
  }
}

mutation editMetadata($id: String!, $metadata: [MetadataInput!]!) {
  replaceMetadata(id: $id, metadata: $metadata) {
    key
    value
    lang
  }
}
