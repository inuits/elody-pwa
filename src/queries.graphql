fragment metadata on Metadata {
  key
  value
  label
  immutable
}

fragment metadataRelation on MetadataRelation {
  key
  value
  label
  type
  metadataOnRelation {
    key
    value
  }
}

fragment minimalBaseEntity on Entity {
  id
  type
  media {
    primaryMediafile
  }
}

fragment editForm on Form {
  fields {
    __typename
    ... on MetadataField {
      label
      key
      type
    }
    ... on RelationField {
      label
      relationType
      metadata {
        key
        type
        label
      }
      acceptedEntityTypes
    }
  }
}

fragment minimalAsset on Asset {
  ...minimalBaseEntity
  teaserMetadata: metadata(keys: ["title", "object_number"], excludeOrInclude: include) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
    }
  }
  title: metadata(keys: ["title"], excludeOrInclude: include) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
    }
  }
}

fragment fullEntity on Entity {
  id
  type
  form {
    ...editForm
  }
  title: metadata(keys: ["title"], excludeOrInclude: include) {
    __typename
    ... on Metadata {
      key
      value
      label
      immutable
    }
  }
  media {
    mediafiles {
      _id
      filename
      thumbnail_file_location
      metadata {
        key
        value
      }
    }
  }
}

fragment fullEntityRecursive on Entity {
  ...fullEntity
  metadata(keys: ["title"], excludeOrInclude: exclude) {
    __typename
    ... on Metadata {
      ...metadata
    }
    ... on MetadataRelation {
      ...metadataRelation
      linkedEntity {
        ... on Asset {
          ...minimalBaseEntity
          teaserMetadata: metadata(
            keys: ["title", "object_number"]
            excludeOrInclude: include
          ) {
            __typename
            ... on Metadata {
              ...metadata
            }
            ... on MetadataRelation {
              ...metadataRelation
            }
          }
        }
        ...fullEntity
        metadata(keys: [], excludeOrInclude: exclude) {
          __typename
          ... on Metadata {
            ...metadata
          }
          ... on MetadataRelation {
            ...metadataRelation
            # linkedEntity {
            #   ...fullEntity
            #   metadata(keys: [], excludeOrInclude: exclude) {
            #     __typename
            #     ... on Metadata {
            #       ...metadata
            #     }
            #     ... on MetadataRelation {
            #       ...metadataRelation
            #       linkedEntity {
            #         ...fullEntity
            #         metadata(keys: [], excludeOrInclude: exclude) {
            #           ... on Metadata {
            #             ...metadata
            #           }
            #           ... on MetadataRelation {
            #             ...metadataRelation
            #           }
            #         }
            #       }
            #     }
            #   }
            # }
          }
        }
      }
    }
  }
}

query getEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter
  $advancedSearchValue: AdvancedSearchInput
  $searchInputType: SearchInputType
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    advancedSearchValue: $advancedSearchValue
    searchInputType: $searchInputType
  ) {
    count
    limit
    results {
      id
      type
      media {
        primaryMediafile
      }
      ... on Asset {
        ...minimalAsset
      }
    }
  }
}

query getEntityById($id: String!) {
  Entity(id: $id) {
    ...fullEntityRecursive
  }
}

fragment job on Job {
  job_type
  job_type
  job_info
  status
  user
  asset_id
  mediafile_id
  parent_job_id
  end_time
  start_time
  amount_of_jobs
  completed_jobs
  _id
  _key
  _rev
}

fragment jobWithSubJobs on Job {
  ...job
  sub_jobs {
    ...job
  }
}

query getDirectories($dir: String) {
  Directories(dir: $dir) {
    id
    dir
    has_subdirs
    parent
  }
}

query getJobs($paginationInfo: PaginationInfo, $filters: Filters) {
  Jobs(paginationInfo: $paginationInfo, filters: $filters) {
    results {
      ...job
    }
    count
    limit
    next
  }
}

query getJob($id: String!) {
  Job(id: $id) {
    ...jobWithSubJobs
  }
}

query getAdvancedFilters {
  advancedFilters {
    label
    type
    key
  }
}

# query getAdvancedFilterResult($filters: [AdvancedSearchInput]!) {
#   Entities(filters: $filters) {
#     count
#     limit
#   }
# }

query getFilterOptions($key: String!) {
  FilterOptions(key: $key) {
    value
    label
  }
}

mutation postStartImport($folder: String!) {
  StartImport(folder: $folder) {
    message_id
  }
}

mutation editMetadata($id: String!, $metadata: [MetadataInput!]!) {
  replaceMetadata(id: $id, metadata: $metadata) {
    key
    value
    lang
  }
}

mutation replaceRelationsAndMetaData($form: MetadataFormInput!) {
  replaceRelationsAndMetaData(form: $form)
}
